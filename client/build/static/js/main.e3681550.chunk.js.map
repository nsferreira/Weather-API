{"version":3,"sources":["logo.svg","Client.js","App.js","serviceWorker.js","City.js","Cities.js","index.js"],"names":["module","exports","__webpack_require__","p","Client","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","temp","_this2","axios","get","then","res","setState","console","log","react_default","a","createElement","type","onClick","click","bind","value","React","Component","App","name","counter","text","Buffer","data","id","age","updateState","assertThisInitialized","setNewNumber","findDomNodeHandler","setStateHandler","forceUpdateHandler","e","target","myDiv","document","getElementById","ReactDOM","findDOMNode","style","color","forceUpdate","myArray","slice","push","BrowserRouter","className","Link","to","Switch","Route","exact","path","component","defaultProps","headerProp","contentProp","propArray","propBool","Boolean","window","location","hostname","match","City","sunrise","sunset","setTimeout","updateFromApi","_this3","obj","Math","rres","temperature","Cities","cities","map","i","City_City","getCities","showCities","render","Cities_Cities"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iRCiBnBC,cACnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAK,GAHSR,uEAQX,IAAAS,EAAAN,KACLO,IAAMC,IAAI,oCACPC,KAAK,SAAAC,GACJJ,EAAKK,SAAS,CAAEN,KAAO,MACvBO,QAAQC,IAAIH,sCAKhB,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,QAASlB,KAAKmB,MAAMC,KAAKpB,MAAOqB,MAAM,aAC1DrB,KAAKI,MAAMC,aArBgBiB,IAAMC,WCkBpCC,GA1BgBF,IAAMC,UAQPD,IAAMC,UAULD,IAAMC,sBAS1B,SAAAC,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACjB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXqB,KAAM,gBACNC,QAAS,EACTC,KAAM,SACNC,OAAQ,GACRC,KAAM,CACJ,CAAEC,GAAM,EACNL,KAAQ,OACRM,IAAO,IAET,CACED,GAAM,EACNL,KAAQ,OACRM,IAAO,IAET,CACED,GAAM,EACNL,KAAQ,YACRM,IAAO,MAKblC,EAAKmC,YAAcnC,EAAKmC,YAAYZ,KAAjBtB,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAEnBA,EAAKqC,aAAerC,EAAKqC,aAAad,KAAlBtB,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAEpBA,EAAKsC,mBAAqBtC,EAAKsC,mBAAmBf,KAAxBtB,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAE1BA,EAAKuC,gBAAkBvC,EAAKuC,gBAAgBhB,KAArBtB,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAEvBA,EAAKwC,mBAAqBxC,EAAKwC,mBAAmBjB,KAAxBtB,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KAjCTA,2EAoCPyC,GACVtC,KAAKW,SAAU,CAACgB,KAAMW,EAAEC,OAAOlB,+CAI/BrB,KAAKW,SAAU,CAAEe,QAAS1B,KAAKI,MAAMsB,QAAU,iDAI/C,IAAIc,EAAQC,SAASC,eAAe,SACpCC,IAASC,YAAYJ,GAAOK,MAAMC,MAAQ,qDAI1C9C,KAAK+C,wDAIL,IACIC,EAAUhD,KAAKI,MAAMwB,OAAOqB,QAChCD,EAAQE,KAFG,YAGXlD,KAAKW,SAAU,CAAEiB,OAAQoB,qCAUzB,OACElC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aACbtC,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAMC,GAAI,WAAV,iBAGNxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAYhE,cA9EpC2B,IAAMC,YAuFFD,IAAMC,UA8B5BC,EAAIoC,aAAe,CACjBC,WAAY,cACZC,YAAa,eACbC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,UAAU,GAIY1C,IAAMC,UCpJV0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCfeC,cACjB,SAAAA,EAAY1E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsE,IACfzE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwE,GAAAnE,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAO,EACPkE,QAAS,GACTC,OAAQ,IALG3E,mFASC,IAAAS,EAAAN,KAChByE,WAAW,WAAQnE,EAAKoE,iBAAmB,6CAGhC,IAAAC,EAAA3E,KACXO,IAAMC,IAAI,8BAA8BR,KAAKJ,MAAMgF,IAAInD,MACtDhB,KAAK,SAAAC,GACFiE,EAAKhE,SAAS,CACVN,KAAOwE,KAAKC,KAAKjD,KAAKkD,YACtBR,QAAS7D,EAAImB,KAAK0C,QAClBC,OAAQ9D,EAAImB,KAAK2C,4CAMzB,OACA1D,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,QAASlB,KAAK0E,cAActD,KAAKpB,MAAOqB,MAAM,aAEvEP,EAAAC,EAAAC,cAAA,UAAKhB,KAAKJ,MAAMgF,IAAI9C,IACpBhB,EAAAC,EAAAC,cAAA,UAAKhB,KAAKJ,MAAMgF,IAAInD,MACpBX,EAAAC,EAAAC,cAAA,UAAKhB,KAAKI,MAAMC,MAChBS,EAAAC,EAAAC,cAAA,UAAKhB,KAAKI,MAAMmE,SAChBzD,EAAAC,EAAAC,cAAA,UAAKhB,KAAKI,MAAMoE,gBAnCMlD,IAAMC,WCCnByD,cAEjB,SAAAA,EAAYpF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgF,IACfnF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkF,GAAA7E,KAAAH,KAAMJ,KACDQ,MAAQ,CACT6E,OAAQ,IAHGpF,2EAOP,IAAAS,EAAAN,KACRO,IAAMC,IAAI,8BACPC,KAAK,SAAAC,GACJJ,EAAKK,SAAS,CAAEsE,OAASvE,EAAImB,8CAKjC,OAAO7B,KAAKI,MAAM6E,OAAOC,IAAI,SAASN,EAAKO,GACvC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,CAAMtD,GAAIqD,EAAGP,IAAKA,uCAK7B,OACK9D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,QAASlB,KAAKqF,UAAUjE,KAAKpB,MAAOqB,MAAM,eAC/DP,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACGF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBAEHF,EAAAC,EAAAC,cAAA,aACChB,KAAKsF,uBApCiBhE,IAAMC,WCuB1CoB,IAAS4C,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAY/C,SAASC,eAAe","file":"static/js/main.e3681550.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Router, Route, Link, browserHistory, IndexRoute } from 'react-router'\r\nimport axios from 'axios';\r\n\r\n/*const axios = require('axios')\r\n\r\nconst getAllCities = async () => {\r\n  try {\r\n    return await axios.get('http://localhost:3000/city')\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}*/\r\n\r\nexport default class Client extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      temp:0\r\n    }\r\n  }\r\n  // http://localhost:3000/city\r\n  \r\n  click(){\r\n    axios.get('http://localhost:3000/city/Porto')\r\n      .then(res =>{\r\n        this.setState({ temp : 1000 });\r\n        console.log(res)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"button\" onClick={this.click.bind(this)} value=\"Get Temp\" />\r\n        {this.state.temp}\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Client from './Client';\n//import Index from './components/Index';\n\n\nclass MyChart extends React.Component{\n  render(){\n    return (\n      <a>1</a>\n    )\n  }\n}\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Header</h1>\n      </div>\n    )\n  }\n}\n\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Nuno Ferreira\",\n      counter: 0,\n      text: 'Inicio',\n      Buffer: [],\n      data: [\n        { \"id\": 1,\n          \"name\": \"Nuno\",\n          \"age\": 41\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Lena\",\n          \"age\": 42\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Margarida\",\n          \"age\": 10\n        }\n      ]\n    }\n\n    this.updateState = this.updateState.bind(this);\n\n    this.setNewNumber = this.setNewNumber.bind(this);\n\n    this.findDomNodeHandler = this.findDomNodeHandler.bind(this);\n\n    this.setStateHandler = this.setStateHandler.bind(this);\n\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  }\n\n  updateState(e) {\n    this.setState( {text: e.target.value});\n  };\n\n  setNewNumber() {\n    this.setState( { counter: this.state.counter + 1 }) \n  };\n\n  findDomNodeHandler() {\n    var myDiv = document.getElementById('myDiv');\n    ReactDOM.findDOMNode(myDiv).style.color = 'green';\n  };\n\n  forceUpdateHandler() {\n    this.forceUpdate();\n  };\n\n  setStateHandler() {\n    var item = \"setState\"\n    var myArray = this.state.Buffer.slice();\n    myArray.push(item);\n    this.setState( { Buffer: myArray })\n  };\n\n  render() {\n    var i = 2;\n    var mystyle = {\n      fontSize: 100,\n      color: '#FF0000'\n    }\n    \n    return (\n      <Router>\n        <div className=\"container\">\n          <h2>Welcome to React Express Tutorial</h2>\n          <ul>\n            <li><Link to={'/client'}>Show Cities</Link></li>\n            {/* <li><Link to={'/index'}>List</Link></li> */}\n          </ul>\n          <hr />\n          <Switch>\n              <Route exact path='/client' component={ Client } />\n              {/* <Route path='/index' component={ Index } /> */}\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nclass Content extends React.Component {\n  \n  componentWillMount() {\n    console.log('componentWillMount');\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log('componentWillReceiveProps');\n  }\n\n  shouldComponentUpdate(newProps, nextState) {\n    return true;\n  }\n\ncomponentWillUpdate(nextProps, nextState) {\n  console.log('componentWillUpdate');\n}\n\n  render() {\n    return (\n      <h3> {this.props.myNumber}</h3>\n    )\n  }\n}\n\n\nApp.defaultProps = {\n  headerProp: \"Header ... \",\n  contentProp: \"Content ... \",\n  propArray: [1, 2, 3, 4, 5],\n  propBool: false\n}\n\n\nclass TableRow  extends React.Component {\n  render() {\n    return (\n      <tr>\n        <td> {this.props.data.id} </td>\n        <td> {this.props.data.name} </td>\n        <td> {this.props.data.age} </td>\n      </tr>\n    )\n  }\n}\n\nexport default App;\n\n/*\nclass Home extends React.Component {\n  render() {\n    <div>\n      <h1>Home</h1>\n    </div>\n  }\n}\nexport default Home;\n\nclass Cities extends React.Component {\n  render() {\n    <div>\n      <h1>Cities</h1>\n    </div>\n  }\n}\nexport default Cities;\n\nclass About extends React.Component {\n  render() {\n    <div>\n      <h1>About</h1>\n    </div>\n  }\n}\nexport default About;\n*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class City extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            temp : 0,\r\n            sunrise: \"\",\r\n            sunset: \"\"\r\n          }\r\n        }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => { this.updateFromApi() }, 1000);\r\n    }\r\n\r\n    updateFromApi(){\r\n        axios.get('http://localhost:3000/city/'+this.props.obj.name)\r\n        .then(res =>{\r\n            this.setState({ \r\n                temp : Math.rres.data.temperature,\r\n                sunrise: res.data.sunrise,\r\n                sunset: res.data.sunset\r\n             });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <tr>\r\n            <td>\r\n                <input type=\"button\" onClick={this.updateFromApi.bind(this)} value=\"Refresh\" />\r\n            </td>\r\n            <td>{this.props.obj.id}</td>\r\n            <td>{this.props.obj.name}</td>\r\n            <td>{this.state.temp}</td>\r\n            <td>{this.state.sunrise}</td>\r\n            <td>{this.state.sunset}</td>\r\n        </tr> \r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport City from './City'\r\nimport axios from 'axios';\r\n\r\nexport default class Cities extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: []\r\n          }\r\n        }\r\n\r\n    getCities() {\r\n        axios.get('http://localhost:3000/city')\r\n          .then(res =>{\r\n            this.setState({ cities : res.data });\r\n          })\r\n      }\r\n\r\n    showCities() {\r\n        return this.state.cities.map(function(obj, i){\r\n            return <City id={i} obj={obj} />\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n             <div>\r\n             <input type=\"button\" onClick={this.getCities.bind(this)} value=\"Get Cities\" />\r\n             <table>\r\n             <thead>\r\n                <th>Refresh city</th>\r\n                <th>ID</th>\r\n                <th>CITY NAME</th>\r\n                <th>TEMPERATURE</th>\r\n                <th>SUNRISE</th>\r\n                <th>SUNSET</th>\r\n             </thead>\r\n             <tbody>\r\n             {this.showCities()}\r\n             </tbody>\r\n             </table>\r\n             </div>\r\n        )\r\n    }\r\n}","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import Client from './Client';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<Client />, document.getElementById('root'));\n\n// // setTimeout(() => {\n// //     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n// // }, 10000);\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\nimport * as serviceWorker from './serviceWorker';\nimport Cities from './Cities'\n\nReactDOM.render(<Cities />, document.getElementById('root'));\n// ReactDOM.render(\n//     <BrowserRouter>\n//       <App />\n//     </BrowserRouter>, document.getElementById('root'));\n// serviceWorker.unregister();\n"],"sourceRoot":""}